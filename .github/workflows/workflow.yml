name: Kubescape Scan and GitHub Summary

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  kubescape_scan_summary:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Minikube
        uses: medyagh/setup-minikube@latest
        with:
          kubernetes-version: 'latest'

      - name: Wait for Minikube to be Ready
        run: kubectl wait --for=condition=ready node/minikube --timeout=60s

      - name: Install Kubescape (if not already present)
        run: |
          if ! command -v kubescape &> /dev/null; then
            curl -s https://raw.githubusercontent.com/armosec/kubescape/master/install.sh | sudo bash
          fi
          kubescape version

      - name: Run Kubescape Scan and Generate JSON Report
        id: run_kubescape_scan
        run: |
          kubescape scan framework nsa -v --format json --output kubescape_report.json
          # Check the output of the Kubescape scan
          if [ ! -s "kubescape_report.json" ]; then
            echo "Error: kubescape_report.json is empty or does not exist.  The Kubescape scan may have failed."
            exit 1
          else
            echo "Kubescape scan completed successfully. Output written to kubescape_report.json"
            cat kubescape_report.json
          fi

      - name: Summarize Kubescape Scan Results
        if: success()
        run: |
          # Install jq
          sudo apt-get update
          sudo apt-get install -y jq

          # Read the JSON report
          report_json=$(cat kubescape_report.json)

          # Extract summary information using jq with null checks
          summary=$(echo "$report_json" | jq -r '
            if (.Summary.TotalResources != null and .Summary.FailedResources != null) then
              {
                "total_controls": .Summary.TotalResources,
                "failed_controls": .Summary.FailedResources,
                "passed_controls": (.Summary.TotalResources - .Summary.FailedResources),
                "compliance_percentage": (100 - (.Summary.FailedResources / .Summary.TotalResources * 100))
              }
            else
              {
                "total_controls": 0,
                "failed_controls": 0,
                "passed_controls": 0,
                "compliance_percentage": 0
              }
            end
          ')

          # Output the summary to GitHub Actions summary
          echo "## Kubescape Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Total Controls: $(echo "$summary" | jq -r .total_controls)" >> $GITHUB_STEP_SUMMARY
          echo "Failed Controls: $(echo "$summary" | jq -r .total_controls)" >> $GITHUB_STEP_SUMMARY
          echo "Passed Controls: $(echo "$summary" | jq -r .passed_controls)" >> $GITHUB_STEP_SUMMARY
          echo "Compliance: $(echo "$summary" | jq -r .compliance_percentage | printf '%.2f%%')" >> $GITHUB_STEP_SUMMARY

          # Extract and output detailed results for each failed control
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Detailed Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Filter and iterate through failed results using jq, handle null
          failed_results=$(echo "$report_json" | jq '.Results | if . == null then [] else .[] | select(.Status == "failed") end')

          # Check if there are any failed results before iterating
          if [[ $(echo "$failed_results" | jq length) -gt 0 ]]; then
            echo "$failed_results" | jq -c '.[]' | while read -r failed_result; do
              control_id=$(echo "$failed_result" | jq -r .ControlID)
              control_name=$(echo "$failed_result" | jq -r .Name)
              message=$(echo "$failed_result" | jq -r .Message)
              remediation=$(echo "$failed_result" | jq -r .Remediation)
              severity=$(echo "$failed_result" | jq -r .Severity)

              echo "<details><summary><strong>$control_name ($control_id) - Severity: $severity</strong></summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "  **Message:** $message  " >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "  **Remediation:** $remediation  " >> $GITHUB_STEP_SUMMARY
              echo "</details>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "No failed controls found." >> $GITHUB_STEP_SUMMARY
          fi
